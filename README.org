#+title: Shell Scripting Exercises
#+PROPERTY: header-args :tangle exercise1.sh
#+description:Bash programming exercises from: \
The Complete Guide to Bash Programming,educative.io\\
https://www.educative.io/courses/guide-to-bash-programming

* Contenido :TOC:
- [[#exercises][Exercises]]
  - [[#integrating-backup-script-to-bash][Integrating backup script to bash]]
  - [[#if-statements][If statements]]
    - [[#operator-][Operator [[]]
    - [[#operator--and-directories][Operator [[ and Directories]]
  - [[#case-stament-compressing-file][Case stament: compressing file]]
    - [[#case-estatement-rewrite-if-else-to-case][Case estatement, rewrite if else to case]]
    - [[#asociative-array][Asociative array]]
  - [[#loop-operators][Loop operators]]
    - [[#while][while]]
    - [[#until][until]]
    - [[#example][Example]]
    - [[#infinite-loop][Infinite loop]]
    - [[#reading-a-standard-input-stream][Reading a Standard Input Stream]]
    - [[#for-statement][For Statement]]
      - [[#examples][Examples]]
    - [[#files-processing][Files processing]]
    - [[#the-second-form-of-for][The second form of for]]
    - [[#controlling-the-loop-execution-break][Controlling the Loop Execution: break]]
    - [[#controlling-loop-execution-continue][Controlling Loop Execution: continue]]
    - [[#exercise][Exercise]]
  - [[#functions][Functions]]
    - [[#returning-a-function-result][Returning a Function Result]]
      - [[#eval][Eval]]
    - [[#exercises-1][Exercises]]
      - [[#exercise-1][Exercise]]

* Exercises
** Integrating backup script to bash
1. Add the script’s path to the PATH variable. Edit the *~/.bash_profile* file for that.
2. Define the alias with an absolute path to the script. Do that in the *~/.bashrc file*.
3. Copy the script to the ~/usr/local/bin~ directory and make it executable:
#+begin_src shell
sudo cp -r make-backup.sh /usr/local/bin/ sudo chmod +x
/usr/local/bin/make-backup.sh
#+end_src
The PATH variable contains this path by default. If there is no such directory
in your environment, create it. \\
If we need to remove a declared alias, we call
the ~unalias~ Bash built-in. For example, this call removes the ~make-backup.sh~
alias:
#+begin_src shell
unalias make-backup.sh
#+end_src
Let’s suppose that we integrated the backup script with Bash in one of three
ways. Then, we can launch it by name, like this:
#+begin_src shell 
make-backup.sh photo
#+end_src
This is the final script:
#+begin_src shell :tangle ./exercises/make-backup.sh
#!/bin/bash

tar -cjf "$1".tar.bz2 "$1" && echo "tar - OK" > results.txt || { echo "tar - FAILS" > results.txt ; exit 1 ; }

mv -f "$1".tar.bz2 ~/backup && echo "cp - OK" >> results.txt || ! echo "cp - FAILS" >> results.txt
#+end_src
** If statements
*** Operator [[
 Write the Bash script with the following if condition:
    1. If the input parameter has a value of Alice, you print “Hello Alice”.
    2. If the input parameter has a value of Bob, you print “Hello Bob”.
    3. If none of the above cases hold, print “Hello John Doe”.
#+begin_src shell :tangle ./exercises/exercise0.sh
#!/bin/bash
if [[ "$1" = "Alice" ]]
then
    echo "Hello Alice"
elif [[ "$1" = "Bob" ]]
then
    echo "Hello Bob"
else
    echo "Hello Jhon Doe"
    exit 1;
fi
#+end_src  
*** Operator [[ and Directories

Write a script to compare two directories named dir1 and dir2. The script should print all files from one directory that are absent in the other one.

#+begin_src shell  :tangle ./exercises/exercise1.sh

  #!/bin/bash
  cd dir1
  find . -type f -exec test ! -e ../dir2/{} \; -a -exec echo {} \;

  cd ../dir2
  find . -type f -exec test ! -e ../dir1/{} \; -a -exec echo {} \;
  #+end_src 

** Case stament: compressing file
#+begin_src shell 
  !#/bin/bash
  operation="$1"

if [[ "$operation" == "-a" ]]
then
    tar -c -f documents.tar ~/Documents
elif [[ "$operation" == "-c" ]]
then
    tar -c -j -f documents.tar.bz2 ~/Documents
elif [[ "$operation" == "-x" ]]
then
    tar -x -f documents.tar*
else
    echo "Invalid option"
    exit 1
fi
#+end_src 

#+begin_src shell :tangle ./exercises/archiving-case.sh
  #!/bin/bash
  operation="$1"
  case "$operation" in
      "-a")
          tar -c -f documents.tar ~/Documents
      ;;

      "-c")
          tar -c -j -f documents.tar.bz2 ~/Documents
      ;;

      "-x")
          tar -x -f documents.tar*
      ;;

      ,*)
          echo "Invalid option"
          exit 1
      ;;
  esac
#+end_src
*** Case estatement, rewrite if else to case
Consider the following script. Rewrite it with the case statement.

#+begin_src shell
#!/bin/bash
if [[ "$1" = "Alice" ]]
then
    echo "Hello Alice"
elif [[ "$1" = "Bob" ]]
then
    echo "Hello Bob"
else 
    echo "Hello John Doe"
fi
#+end_src

#+begin_src shell :tangle ./exercises/script.sh
#!/usr/bin/env bash
variable="$1"
case "$variable" in
    "Alice")
        echo "Hello Alice"
    ;;

    "Bob")
        echo "Hello Bob"
    ;;

    *)
        echo "Hello John Doe"
        exit 1;
    ;;
esac
#+end_src
*** Asociative array
#+begin_src shell :tangle ./exercises/switch-config-case.sh
  #! /bin/bash

  opcion="$1"
  rm -r ~/.bashrc
  case "$opcion" in
      "h")
          ln -s ~/.bashrc-home ~/.bashrc
          ;;
      "w")
          ln -s ~/.bashrc-work ~/.bashrc
          ;;
      ,*)
          echo "opcion inválida"
          exit 1;
          ;;
  esac
#+end_src

#+begin_src shell :tangle ./exercises/switch-config-array.sh
  #!/bin/bash

  file="$1"

  rm ~/.bashrc

  case "$file" in
      "h")
          ln -s ~/.bashrc-home ~/.bashrc
          ;;

      "w")
          ln -s ~/.bashrc-work ~/.bashrc
          ;;

      ,*)
          echo "Invalid option"
          ;;
  esac
#+end_src
** Loop operators
*** while
#+begin_src shell
#!/bin/bash

while ! ping -c 1 -W 1 google.com &> /dev/null
do
  sleep 1
done
#+end_src
*** until
#+begin_src shell
#!/bin/bash

until ping -c 1 -W 1 google.com &> /dev/null
do
    sleep 1
done

echo "The google.com server is available"
#+end_src
*** Example
Sleep and create a file.
#+begin_src shell :tangle  ./exercises/sleep-and-create-a-file.sh
#sleep-and-create-a-file.sh
  sleep 5
  touch file.txt
#+end_src
#+begin_src shell :tangle ./exercises/check-a-file.sh
#!/bin/bash

# running the file in background 
./sleep-and-create-a-file.sh &

# using while loop to find the file
while [[ ! -e "./file.txt" ]]
do
  echo "File not found";
  sleep 1;
done

echo "File found!!!"
#+end_src

#+RESULTS:
: File found!!!

*** Infinite loop
En este script se muestra el espacio usado en el disco duro.
#+begin_src shell
#!/bin/bash

while true
do
	clear
	df -hT
	echo “Zzzzz”
	sleep 2
done
#+end_src
*** Reading a Standard Input Stream
Este texto pertenece al /contacts.txt/
#+begin_src shell
Alice=alice@gmail.com
Bob=(697) 955-5984
Eve=(245) 317-0117
Mallory=mallory@hotmail.com
#+end_src


#+begin_src shell :tangle ./exercises/while-contacts.sh
  #!/bin/bash

  declare -A array

  while IFS=$'=' read -r name contact
  do
      array[$name]=$contact
  done < "contacts.txt"

  echo "${array["$1"]}"
#./while-contacts.sh "Alice"

#+end_src
*** For Statement
Here, we should not enclose the position parameter ~$1~ in quotes. Quotes prevent
word splitting. Without word splitting, Bash passes the whole string to the
first iteration of the ~for~ loop. Then, the loop finishes. We do not want this
behavior. The script should process each word of the string separately.
#+begin_src shell
#!/bin/bash

for word in $1
do
    echo "$word"
done
#+end_src
When we call the script, we should enclose the input string in the
double-quotes. Then, the whole string comes into the ~$1~ parameter. Here is an
example of calling the script: ~./for-string.sh \"this is a string\"~

There is a way to get rid of the double quotes when calling the script. Replace
the ~$1~ parameter in the for condition with ~$@~. Then, the loop statement becomes
like this:
#+begin_src shell
  #!/bin/bash
  for word in $@
  do
    echo "$word"
  done
#+end_src
Now, both following script calls work properly:
#+begin_src shell
./for-string.sh this is a string
./for-string.sh "this is a string"
#+end_src
The ~for~ has a short form.We use it when we need to handle all input parameters
of the script. This short-form looks like this:
#+begin_src shell
#get rid of "in $@"
  for word
  do
    echo "$word"
  done
#+end_src
**** Examples
For String
#+begin_src shell
#!/bin/bash
#"hola perro"
for word in $1
do
    echo "$word"
done
#+end_src
for path
#+begin_src shell
  #!/bin/bash
#hola,perro,asqueroso
#./for-path.sh "~/My Documents/file1.pdf,~/My Documents/report2.txt"
  IFS=$','
  for path in $1
  do
      echo "$path"
  done
#+end_src
for array
#+begin_src shell
#!/bin/bash
array=(Alice Bob Eve Mallory)

for element in "${array[@]}"
do
    echo "$element"
done
#+end_src
There is another way to handle the array.
1. Write the string with indices of the elements you need. They should be separated by spaces.
2. Put the string into the for condition.
3. The loop gives you an index on each iteration.
#+begin_src shell
array=(Alice Bob Eve Mallory)

for i in 0 1 2
do
  echo "${array[i]}"
done
#+end_src
or
#+begin_src shell
array=(Alice Bob Eve Mallory)

for i in {0..2}
do
  echo "${array[i]}"
done
#+end_src
for elements
#+begin_src shell
    #!/bin/bash

    array=(Alice Bob Eve Mallory)

    for element in "${array[@]:0:2}"
    do
        echo "$element"
    done
#Alice
#Bob
#+end_src
*** Files processing
#+begin_src shell
#!/bin/bash

find . -maxdepth 1 -print0 |
while IFS= read -r -d '' filename
do
    file "$filename"
done
#+end_src
#+begin_src shell
for filename in ~/Documents/*.pdf
#or
find . -maxdepth 1 -exec file {} \;
#+end_src
*** The second form of for
The second ~form~ of the for statement allows us to apply an arithmetic expression
as a condition. Let’s consider cases when we need the second form.
#+begin_src shell
#!/bin/bash

result=1

for i in {1..5}
do
    ((result *= $i))
done

echo "The factorial of 5 is $result"
#+end_src
The ~seq~ utility can solve our problem. It generates a sequence of integers or fractions.

The following table shows options to call the seq utility.\\
#+DOWNLOADED: file:///home/darycc/Desktop/seq.png @ 2022-07-01 04:16:26
[[file:Exercises/2022-07-01_04-16-26_seq.png]]

~./for-factorial-seq.sh  3~
#+begin_src shell
  #!/bin/bash

  result=1

  for i in $(seq $1)
  do
      ((result *= $i))
  done

  echo "The factorial of $1 is $result"
#+end_src

#+begin_src shell
  #!/bin/bash

result=1

for (( i = 1; i <= $1; ++i ))
do
    ((result *= i))
done

echo "The factorial of $1 is $result"
#+end_src
*** Controlling the Loop Execution: break
for break
#+begin_src shell
  #!/bin/bash

  array=(Alice Bob Eve Mallory)
  is_found="0"
  GET
  for element in "${array[@]}"
  do
      if [[ "$element" == "$1" ]]
      then
          is_found="1"
          break
      fi
  done
  #no equal
  if [[ "$is_found" -ne "0" ]]
  then
      echo "The array contains the $1 element"
  else
      echo "The array does not contain the $1 element"
  fi
#+end_src
for exit
#+begin_src shell
#!/bin/bash

array=(Alice Bob Eve Mallory)

for element in "${array[@]}"
do
  if [[ "$element" == "$1" ]]
  then
    echo "The array contains the $1 element"
    exit 0
  fi
done

echo "The array does not contain the $1 element"

#+end_src
*** Controlling Loop Execution: continue
Sin /continue/
#+begin_src shell
#!/bin/bash

array=(1 25 -5 4 -9 3)
sum=0

for element in "${array[@]}"
do
  if (( 0 < element ))
  then
    ((sum += element))
  fi
done

echo "The sum of the positive numbers is $sum"

#+end_src

Con /continue/
#+begin_src shell
#!/bin/bash

array=(1 25 -5 4 -9 3)
sum=0

for element in "${array[@]}"
do
  if (( element < 0))
  then
    continue
  fi

  ((sum += element))
done

echo "The sum of the positive numbers is $sum"

#+end_src
*** Exercise
Write a game called /More or Less/ The first participant chooses any number
from 1 to 100. The second participant tries to guess it in seven tries.

Our script chooses a number. The user enters their guess. The script answers if
the guess is more or less than the chosen number. The user then tries to guess
the number six more times.
#+begin_src shell :tangle ./exercises/more-less-game.sh
#!/bin/bash
let numero=$(( $RANDOM % 100 + 1))
#echo "$numero"

for i in {1..7}
do
    echo "Escribe el numero"
    read eleccion
    #echo "$numero"

    if ((numero < eleccion))
    then
        echo "El numero debe ser menor"
    elif ((numero > eleccion))
    then
        echo "El numero debe ser mayor"
    else
        echo "Ese es el número"
        exit 0
    fi

done
echo "Ya la cagaste, no adivinaste ni mergas"
#+end_src
** Functions
#+begin_src shell
    #!/bin/bash
      mem() { cat /proc/meminfo; }
  #mem
  #unset mem
  #unset -f mem, to remove the function and keep the variable
#+end_src
*** Returning a Function Result
In a typical procedural language, the ~return~ command returns a variable of any
type from a function. It can be a number, string, or array. We need other
mechanisms for doing that in Bash. There are three options:

**** Eval
On a Unix or Linux system, the ~eval~ command is used to run the arguments as a
shell command.

When you have a Unix or Linux command saved in a variable and wish to run that
command, the ~eval~ command is useful. The command evaluates the argument first,
then executes the command it contains.

Syntax: ~eval [arg]...~
#+begin_src shell
      eval echo hi
  #output
  # __ed_mem.txt
  # __ed_script.sh
  # __ed_stderr.txt
  # __ed_stdout.txt
  # main.sh
  # output

#+end_src
1. The command susbstitution
#+begin_src shell
code_to_error()
{
  case $1 in
    1)
      echo "File not found:"
      ;;
    2)
      echo "Permission to read the file denied:"
      ;;
  esac
}

print_error()
{
  echo "$(code_to_error $1) $2" >> debug.log
}


# Calling the function
print_error 1 "readme.txt"
print_error 2 "readme.txt"
#+end_src

2. A global variable
#+begin_src shell
code_to_error()
{
  case $1 in
    1)
      error_text="File not found:"
      ;;
    2)
      error_text="Permission to read the file denied:"
      ;;
  esac
}

print_error()
{
  code_to_error $1
  echo "$error_text $2" >> debug.log
}


# Calling the function
print_error 1 "readme2.txt"
print_error 2 "readme2.txt"
#+end_src
3. The caller specifies a global variable
#+begin_src shell
code_to_error()
{
  local _result_variable=$2

  case $1 in
    1)
      eval $_result_variable="'File not found:'"
      ;;
    2)
      eval $_result_variable="'Permission to read the file denied:'"
      ;;
  esac
}

print_error()
{
  code_to_error $1 "error_text"
  echo "$error_text $2" >> debug.log
}


# Calling the function
print_error 1 "readme.txt"
print_error 2 "readme.txt"
#+end_src
*** Exercises
**** Exercise
Write the following functions for printing error messages in English and German:
+ print_error
+ code_to_error_en
+ code_to_error_de
Write two versions of the "code_to_error" function:
+ Using the case statement in ~print-error-local.sh~ file
#+begin_src shell :tangle ./exercises/print-error-local.sh
    #! /bin/bash

    code_to_error_de()
    {
        case $1 in
            1)
                echo "Der Datei wurde nicht gefunden:"
                ;;
            2)
                echo "Berechtigung zum Lesen der Datei verweigert:"
                ;;
        esac
    }

    code_to_error_en()
    {
        case $1 in
            1)
                echo "File not found:"
                ;;
            2)
                echo "Permission to read the file denied:"
                ;;
        esac
    }

    print_error()
    {
        echo "$LANG"
      case $LANG in
      de_DE)
        local func="code_to_error_de"
        ;;
      en_US)
        local func="code_to_error_en"
        ;;
      ,*)
        local func="code_to_error_en"
        ;;
    esac

    echo "$($func $1) $2" >> debug.log  }

    print_error 1 "readme.txt"
#+end_src

+ Using an associative array in ~print-error-array.sh~ file

#+begin_src shell :tangle ./exercises/print-error-array.sh
#!/bin/bash

print_error()
{
  declare -A messages

  messages["de_DE",1]="Der Datei wurde nicht gefunden:"
  messages["de_DE",2]="Berechtigung zum Lesen der Datei verweigert:"

  messages["en_US",1]="File not found:"
  messages["en_US",2]="Permission to read the file denied:"

  echo "${messages[$LANGUAGE,$1]} $2" >> debug.log
}

print_error 1 "readme.txt"  
#+end_src
